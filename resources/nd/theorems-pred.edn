; Generated by lwb rev 1.0.0000 at 2016-11-28
; Do not edit.
{:id :not-forall->exists-not, :given [(not (forall [x] (P x)))], :conclusion [(exists [x] (not (P x)))], :proof [{:plid 1, :roth :premise, :body (not (forall [x] (P x)))} [{:plid 4, :body (not (exists [x] (not (P x)))), :roth :assumption, :refs nil} [{:plid 8, :body (actual :i), :roth :assumption, :refs nil} [{:plid 11, :body (not (P :i)), :roth :assumption, :refs nil} {:plid 14, :body (exists [x] (not (P x))), :roth :exists-i, :refs [8 11]} {:plid 13, :body contradiction, :roth :not-e, :refs [4 14]}] {:plid 10, :body (P :i), :roth :raa, :refs [[11 13]]}] {:plid 7, :body (forall [x] (P x)), :roth :forall-i, :refs [[8 10]]} {:plid 6, :body contradiction, :roth :not-e, :refs [1 7]}] {:plid 2, :body (exists [x] (not (P x))), :roth :raa, :refs [[4 6]]}]}
{:id :exists-not->not-forall, :given [(exists [x] (not (P x)))], :conclusion [(not (forall [x] (P x)))], :proof [{:plid 1, :roth :premise, :body (exists [x] (not (P x)))} [{:plid 4, :body (forall [x] (P x)), :roth :assumption, :refs nil} [{:plid 7, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (not (P :i)), :roth :assumption, :refs nil} {:plid 11, :body (P :i), :roth :forall-e, :refs [4 7]} {:plid 12, :body contradiction, :roth :not-e, :refs [8 11]}] {:plid 6, :body contradiction, :roth :exists-e, :refs [1 [7 12]]}] {:plid 2, :body (not (forall [x] (P x))), :roth :not-i, :refs [[4 6]]}]}
{:id :not-exists->forall-not, :given [(not (exists [x] (P x)))], :conclusion [(forall [x] (not (P x)))], :proof [{:plid 1, :roth :premise, :body (not (exists [x] (P x)))} [{:plid 4, :body (actual :i), :roth :assumption, :refs nil} [{:plid 7, :body (P :i), :roth :assumption, :refs nil} {:plid 10, :body (exists [x] (P x)), :roth :exists-i, :refs [4 7]} {:plid 9, :body contradiction, :roth :not-e, :refs [1 10]}] {:plid 6, :body (not (P :i)), :roth :not-i, :refs [[7 9]]}] {:plid 2, :body (forall [x] (not (P x))), :roth :forall-i, :refs [[4 6]]}]}
{:id :forall-not->not-exists, :given [(forall [x] (not (P x)))], :conclusion [(not (exists [x] (P x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (not (P x)))} [{:plid 4, :body (exists [x] (P x)), :roth :assumption, :refs nil} [{:plid 7, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (P :i), :roth :assumption, :refs nil} {:plid 11, :body (not (P :i)), :roth :forall-e, :refs [1 7]} {:plid 12, :body contradiction, :roth :not-e, :refs [11 8]}] {:plid 6, :body contradiction, :roth :exists-e, :refs [4 [7 12]]}] {:plid 2, :body (not (exists [x] (P x))), :roth :not-i, :refs [[4 6]]}]}
{:id :forall-comm1, :given [(forall [x] (forall [y] (A x y)))], :conclusion [(forall [y] (forall [x] (A x y)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (forall [y] (A x y)))} [{:plid 4, :body (actual :y), :roth :assumption, :refs nil} [{:plid 7, :body (actual :x), :roth :assumption, :refs nil} {:plid 10, :body (forall [y] (A :x y)), :roth :forall-e, :refs [1 7]} {:plid 11, :body (A :x :y), :roth :forall-e, :refs [10 4]}] {:plid 6, :body (forall [x] (A x :y)), :roth :forall-i, :refs [[7 11]]}] {:plid 2, :body (forall [y] (forall [x] (A x y))), :roth :forall-i, :refs [[4 6]]}]}
{:id :forall-comm2, :given [(forall [y] (forall [x] (A x y)))], :conclusion [(forall [x] (forall [y] (A x y)))], :proof [{:plid 1, :roth :premise, :body (forall [y] (forall [x] (A x y)))} [{:plid 4, :body (actual :x), :roth :assumption, :refs nil} [{:plid 7, :body (actual :y), :roth :assumption, :refs nil} {:plid 10, :body (forall [x] (A x :y)), :roth :forall-e, :refs [1 7]} {:plid 11, :body (A :x :y), :roth :forall-e, :refs [10 4]}] {:plid 6, :body (forall [y] (A :x y)), :roth :forall-i, :refs [[7 11]]}] {:plid 2, :body (forall [x] (forall [y] (A x y))), :roth :forall-i, :refs [[4 6]]}]}
{:id :exists-comm1, :given [(exists [x] (exists [y] (A x y)))], :conclusion [(exists [y] (exists [x] (A x y)))], :proof [{:plid 1, :roth :premise, :body (exists [x] (exists [y] (A x y)))} [{:plid 4, :body (actual :x), :roth :assumption, :refs nil} {:plid 5, :body (exists [y] (A :x y)), :roth :assumption, :refs nil} [{:plid 8, :body (actual :y), :roth :assumption, :refs nil} {:plid 9, :body (A :x :y), :roth :assumption, :refs nil} {:plid 12, :body (exists [x] (A x :y)), :roth :exists-i, :refs [4 9]} {:plid 11, :body (exists [y] (exists [x] (A x y))), :roth :exists-i, :refs [8 12]}] {:plid 7, :body (exists [y] (exists [x] (A x y))), :roth :exists-e, :refs [5 [8 11]]}] {:plid 2, :body (exists [y] (exists [x] (A x y))), :roth :exists-e, :refs [1 [4 7]]}]}
{:id :exists-comm2, :given [(exists [y] (exists [x] (A x y)))], :conclusion [(exists [x] (exists [y] (A x y)))], :proof [{:plid 1, :roth :premise, :body (exists [y] (exists [x] (A x y)))} [{:plid 4, :body (actual :y), :roth :assumption, :refs nil} {:plid 5, :body (exists [x] (A x :y)), :roth :assumption, :refs nil} [{:plid 8, :body (actual :x), :roth :assumption, :refs nil} {:plid 9, :body (A :x :y), :roth :assumption, :refs nil} {:plid 12, :body (exists [y] (A :x y)), :roth :exists-i, :refs [4 9]} {:plid 11, :body (exists [x] (exists [y] (A x y))), :roth :exists-i, :refs [8 12]}] {:plid 7, :body (exists [x] (exists [y] (A x y))), :roth :exists-e, :refs [5 [8 11]]}] {:plid 2, :body (exists [x] (exists [y] (A x y))), :roth :exists-e, :refs [1 [4 7]]}]}
{:id :exists-forall-comm, :given [(exists [x] (forall [y] (A x y)))], :conclusion [(forall [y] (exists [x] (A x y)))], :proof [{:plid 1, :roth :premise, :body (exists [x] (forall [y] (A x y)))} [{:plid 4, :body (actual :y), :roth :assumption, :refs nil} [{:plid 7, :body (actual :x), :roth :assumption, :refs nil} {:plid 8, :body (forall [y] (A :x y)), :roth :assumption, :refs nil} {:plid 11, :body (A :x :y), :roth :forall-e, :refs [8 4]} {:plid 10, :body (exists [x] (A x :y)), :roth :exists-i, :refs [7 11]}] {:plid 6, :body (exists [x] (A x :y)), :roth :exists-e, :refs [1 [7 10]]}] {:plid 2, :body (forall [y] (exists [x] (A x y))), :roth :forall-i, :refs [[4 6]]}]}
{:id :exists-or-dist1, :given [(exists [x] (or (A x) (B x)))], :conclusion [(or (exists [x] (A x)) (exists [x] (B x)))], :proof [{:plid 1, :roth :premise, :body (exists [x] (or (A x) (B x)))} [{:plid 4, :body (actual :x), :roth :assumption, :refs nil} {:plid 5, :body (or (A :x) (B :x)), :roth :assumption, :refs nil} [{:plid 8, :body (A :x), :roth :assumption, :refs nil} {:plid 14, :body (exists [x] (A x)), :roth :exists-i, :refs [4 8]} {:plid 10, :body (or (exists [x] (A x)) (exists [x] (B x))), :roth :or-i1, :refs [14]}] [{:plid 11, :body (B :x), :roth :assumption, :refs nil} {:plid 16, :body (exists [x] (B x)), :roth :exists-i, :refs [4 11]} {:plid 13, :body (or (exists [x] (A x)) (exists [x] (B x))), :roth :or-i2, :refs [16]}] {:plid 7, :body (or (exists [x] (A x)) (exists [x] (B x))), :roth :or-e, :refs [5 [8 10] [11 13]]}] {:plid 2, :body (or (exists [x] (A x)) (exists [x] (B x))), :roth :exists-e, :refs [1 [4 7]]}]}
{:id :exists-or-dist2, :given [(or (exists [x] (A x)) (exists [x] (B x)))], :conclusion [(exists [x] (or (A x) (B x)))], :proof [{:plid 1, :roth :premise, :body (or (exists [x] (A x)) (exists [x] (B x)))} [{:plid 4, :body (exists [x] (A x)), :roth :assumption, :refs nil} [{:plid 10, :body (actual :x), :roth :assumption, :refs nil} {:plid 11, :body (A :x), :roth :assumption, :refs nil} {:plid 14, :body (or (A :x) (B :x)), :roth :or-i1, :refs [11]} {:plid 13, :body (exists [x] (or (A x) (B x))), :roth :exists-i, :refs [10 14]}] {:plid 6, :body (exists [x] (or (A x) (B x))), :roth :exists-e, :refs [4 [10 13]]}] [{:plid 7, :body (exists [x] (B x)), :roth :assumption, :refs nil} [{:plid 16, :body (actual :x), :roth :assumption, :refs nil} {:plid 17, :body (B :x), :roth :assumption, :refs nil} {:plid 20, :body (or (A :x) (B :x)), :roth :or-i2, :refs [17]} {:plid 19, :body (exists [x] (or (A x) (B x))), :roth :exists-i, :refs [16 20]}] {:plid 9, :body (exists [x] (or (A x) (B x))), :roth :exists-e, :refs [7 [16 19]]}] {:plid 2, :body (exists [x] (or (A x) (B x))), :roth :or-e, :refs [1 [4 6] [7 9]]}]}
{:id :forall-and-dist1, :given [(forall [x] (and (A x) (B x)))], :conclusion [(and (forall [x] (A x)) (forall [x] (B x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (and (A x) (B x)))} [{:plid 7, :body (actual :x), :roth :assumption, :refs nil} {:plid 10, :body (and (A :x) (B :x)), :roth :forall-e, :refs [1 7]} {:plid 11, :body (A :x), :roth :and-e1, :refs [10]}] {:plid 4, :body (forall [x] (A x)), :roth :forall-i, :refs [[7 11]]} [{:plid 12, :body (actual :x), :roth :assumption, :refs nil} {:plid 15, :body (and (A :x) (B :x)), :roth :forall-e, :refs [1 12]} {:plid 16, :body (B :x), :roth :and-e2, :refs [10]}] {:plid 5, :body (forall [x] (B x)), :roth :forall-i, :refs [[12 16]]} {:plid 2, :body (and (forall [x] (A x)) (forall [x] (B x))), :roth :and-i, :refs [4 5]}]}
{:id :forall-and-dist2, :given [(and (forall [x] (A x)) (forall [x] (B x)))], :conclusion [(forall [x] (and (A x) (B x)))], :proof [{:plid 1, :roth :premise, :body (and (forall [x] (A x)) (forall [x] (B x)))} {:plid 4, :body (forall [x] (A x)), :roth :and-e1, :refs [1]} {:plid 5, :body (forall [x] (B x)), :roth :and-e2, :refs [1]} [{:plid 6, :body (actual :x), :roth :assumption, :refs nil} {:plid 9, :body (A :x), :roth :forall-e, :refs [4 6]} {:plid 10, :body (B :x), :roth :forall-e, :refs [5 6]} {:plid 8, :body (and (A :x) (B :x)), :roth :and-i, :refs [9 10]}] {:plid 2, :body (forall [x] (and (A x) (B x))), :roth :forall-i, :refs [[6 8]]}]}
{:id :exists-and-dist, :given [(exists [x] (and (A x) (B x)))], :conclusion [(and (exists [x] (A x)) (exists [x] (B x)))], :proof [{:plid 1, :roth :premise, :body (exists [x] (and (A x) (B x)))} [{:plid 4, :body (actual :x), :roth :assumption, :refs nil} {:plid 5, :body (and (A :x) (B :x)), :roth :assumption, :refs nil} {:plid 8, :body (A :x), :roth :and-e1, :refs [5]} {:plid 9, :body (B :x), :roth :and-e2, :refs [5]} {:plid 10, :body (exists [x] (A x)), :roth :exists-i, :refs [4 8]} {:plid 11, :body (exists [x] (B x)), :roth :exists-i, :refs [4 9]} {:plid 7, :body (and (exists [x] (A x)) (exists [x] (B x))), :roth :and-i, :refs [10 11]}] {:plid 2, :body (and (exists [x] (A x)) (exists [x] (B x))), :roth :exists-e, :refs [1 [4 7]]}]}
{:id :forall-or-dist, :given [(or (forall [x] (A x)) (forall [x] (B x)))], :conclusion [(forall [x] (or (A x) (B x)))], :proof [{:plid 1, :roth :premise, :body (or (forall [x] (A x)) (forall [x] (B x)))} [{:plid 4, :body (forall [x] (A x)), :roth :assumption, :refs nil} [{:plid 10, :body (actual :x), :roth :assumption, :refs nil} {:plid 13, :body (A :x), :roth :forall-e, :refs [4 10]} {:plid 12, :body (or (A :x) (B :x)), :roth :or-i1, :refs [13]}] {:plid 6, :body (forall [x] (or (A x) (B x))), :roth :forall-i, :refs [[10 12]]}] [{:plid 7, :body (forall [x] (B x)), :roth :assumption, :refs nil} [{:plid 15, :body (actual :x), :roth :assumption, :refs nil} {:plid 18, :body (B :x), :roth :forall-e, :refs [7 15]} {:plid 17, :body (or (A :x) (B :x)), :roth :or-i2, :refs [18]}] {:plid 9, :body (forall [x] (or (A x) (B x))), :roth :forall-i, :refs [[15 17]]}] {:plid 2, :body (forall [x] (or (A x) (B x))), :roth :or-e, :refs [1 [4 6] [7 9]]}]}
{:id :equal-refl, :given [(= :t1 :t2)], :conclusion [(= :t2 :t1)], :proof [{:plid 1, :roth :premise, :body (= :t1 :t2)} {:plid 4, :body (= :t1 :t1), :roth :equal-i, :refs []} {:plid 5, :body (= :t2 :t1), :roth :equal-e, :refs [1 4 (= x :t1) x]}]}
{:id :equal-trans, :given [(= :t1 :t2) (= :t2 :t3)], :conclusion [(= :t1 :t3)], :proof [{:plid 1, :roth :premise, :body (= :t1 :t2)} {:plid 2, :roth :premise, :body (= :t2 :t3)} {:plid 5, :body (= :t1 :t3), :roth :equal-e, :refs [2 1 (= :t1 x) x]}]}
{:id :modus-barbara, :given [(forall [x] (impl (P x) (Q x))) (forall [x] (impl (Q x) (R x)))], :conclusion [(forall [x] (impl (P x) (R x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (Q x)))} {:plid 2, :roth :premise, :body (forall [x] (impl (Q x) (R x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (impl (P :i) (Q :i)), :roth :forall-e, :refs [1 5]} {:plid 9, :body (impl (Q :i) (R :i)), :roth :forall-e, :refs [2 5]} [{:plid 10, :body (P :i), :roth :assumption, :refs nil} {:plid 13, :body (Q :i), :roth :impl-e, :refs [8 10]} {:plid 14, :body (R :i), :roth :impl-e, :refs [9 13]}] {:plid 7, :body (impl (P :i) (R :i)), :roth :impl-i, :refs [[10 14]]}] {:plid 3, :body (forall [x] (impl (P x) (R x))), :roth :forall-i, :refs [[5 7]]}]}
{:id :modus-celarent, :given [(forall [x] (impl (P x) (not (Q x)))) (forall [x] (impl (R x) (P x)))], :conclusion [(forall [x] (impl (R x) (not (Q x))))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (not (Q x))))} {:plid 2, :roth :premise, :body (forall [x] (impl (R x) (P x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (impl (P :i) (not (Q :i))), :roth :forall-e, :refs [1 5]} {:plid 9, :body (impl (R :i) (P :i)), :roth :forall-e, :refs [2 5]} [{:plid 10, :body (R :i), :roth :assumption, :refs nil} {:plid 13, :body (P :i), :roth :impl-e, :refs [9 10]} {:plid 14, :body (not (Q :i)), :roth :impl-e, :refs [8 13]}] {:plid 7, :body (impl (R :i) (not (Q :i))), :roth :impl-i, :refs [[10 14]]}] {:plid 3, :body (forall [x] (impl (R x) (not (Q x)))), :roth :forall-i, :refs [[5 7]]}]}
{:id :modus-darii, :given [(forall [x] (impl (P x) (Q x))) (exists [x] (and (R x) (P x)))], :conclusion [(exists [x] (and (R x) (Q x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (Q x)))} {:plid 2, :roth :premise, :body (exists [x] (and (R x) (P x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 6, :body (and (R :i) (P :i)), :roth :assumption, :refs nil} {:plid 9, :body (impl (P :i) (Q :i)), :roth :forall-e, :refs [1 5]} {:plid 10, :body (P :i), :roth :and-e2, :refs [6]} {:plid 11, :body (Q :i), :roth :impl-e, :refs [9 10]} {:plid 12, :body (R :i), :roth :and-e1, :refs [6]} {:plid 13, :body (and (R :i) (Q :i)), :roth :and-i, :refs [12 11]} {:plid 8, :body (exists [x] (and (R x) (Q x))), :roth :exists-i, :refs [5 13]}] {:plid 3, :body (exists [x] (and (R x) (Q x))), :roth :exists-e, :refs [2 [5 8]]}]}
{:id :modus-ferio, :given [(forall [x] (impl (P x) (not (Q x)))) (exists [x] (and (R x) (P x)))], :conclusion [(exists [x] (and (R x) (not (Q x))))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (not (Q x))))} {:plid 2, :roth :premise, :body (exists [x] (and (R x) (P x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 6, :body (and (R :i) (P :i)), :roth :assumption, :refs nil} {:plid 9, :body (impl (P :i) (not (Q :i))), :roth :forall-e, :refs [1 5]} {:plid 10, :body (P :i), :roth :and-e2, :refs [6]} {:plid 11, :body (not (Q :i)), :roth :impl-e, :refs [9 10]} {:plid 12, :body (R :i), :roth :and-e1, :refs [6]} {:plid 13, :body (and (R :i) (not (Q :i))), :roth :and-i, :refs [12 11]} {:plid 8, :body (exists [x] (and (R x) (not (Q x)))), :roth :exists-i, :refs [5 13]}] {:plid 3, :body (exists [x] (and (R x) (not (Q x)))), :roth :exists-e, :refs [2 [5 8]]}]}