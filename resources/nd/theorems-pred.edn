; Generated by lwb rev 1.0.0000 at 2016-11-08
; Do not edit.
 {:id :not-forall->exists-not, :given [(not (forall [x] (P x)))], :conclusion [(exists [x] (not (P x)))], :proof [{:plid 1, :roth :premise, :body (not (forall [x] (P x)))} [{:plid 4, :body (not (exists [x] (not (P x)))), :roth :assumption, :refs nil} [{:plid 8, :body (actual :i), :roth :assumption, :refs nil} [{:plid 11, :body (not (P :i)), :roth :assumption, :refs nil} {:plid 14, :body (exists [x] (not (P x))), :roth :exists-i, :refs [8 11]} {:plid 13, :body contradiction, :roth :not-e, :refs [4 14]}] {:plid 10, :body (P :i), :roth :raa, :refs [[11 13]]}] {:plid 7, :body (forall [x] (P x)), :roth :forall-i, :refs [[8 10]]} {:plid 6, :body contradiction, :roth :not-e, :refs [1 7]}] {:plid 2, :body (exists [x] (not (P x))), :roth :raa, :refs [[4 6]]}]} {:id :exists-not->not-forall, :given [(exists [x] (not (P x)))], :conclusion [(not (forall [x] (P x)))], :proof [{:plid 1, :roth :premise, :body (exists [x] (not (P x)))} [{:plid 4, :body (forall [x] (P x)), :roth :assumption, :refs nil} [{:plid 7, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (not (P :i)), :roth :assumption, :refs nil} {:plid 11, :body (P :i), :roth :forall-e, :refs [4 7]} {:plid 12, :body contradiction, :roth :not-e, :refs [8 11]}] {:plid 6, :body contradiction, :roth :exists-e, :refs [1 [7 12]]}] {:plid 2, :body (not (forall [x] (P x))), :roth :not-i, :refs [[4 6]]}]}
 {:id :not-exists->forall-not, :given [(not (exists [x] (P x)))], :conclusion [(forall [x] (not (P x)))], :proof [{:plid 1, :roth :premise, :body (not (exists [x] (P x)))} [{:plid 4, :body (actual :i), :roth :assumption, :refs nil} [{:plid 7, :body (P :i), :roth :assumption, :refs nil} {:plid 10, :body (exists [x] (P x)), :roth :exists-i, :refs [4 7]} {:plid 9, :body contradiction, :roth :not-e, :refs [1 10]}] {:plid 6, :body (not (P :i)), :roth :not-i, :refs [[7 9]]}] {:plid 2, :body (forall [x] (not (P x))), :roth :forall-i, :refs [[4 6]]}]}
 {:id :forall-not->not-exists, :given [(forall [x] (not (P x)))], :conclusion [(not (exists [x] (P x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (not (P x)))} [{:plid 4, :body (exists [x] (P x)), :roth :assumption, :refs nil} [{:plid 7, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (P :i), :roth :assumption, :refs nil} {:plid 11, :body (not (P :i)), :roth :forall-e, :refs [1 7]} {:plid 12, :body contradiction, :roth :not-e, :refs [11 8]}] {:plid 6, :body contradiction, :roth :exists-e, :refs [4 [7 12]]}] {:plid 2, :body (not (exists [x] (P x))), :roth :not-i, :refs [[4 6]]}]}
 {:id :equals-refl, :given [(= t1 t2)], :conclusion [(= t2 t1)], :proof [{:plid 1, :roth :premise, :body (= t1 t2)} {:plid 4, :body (= t1 t1), :roth :equal-i, :refs []} {:plid 5, :body (= t2 t1), :roth :equal-e, :refs [1 4 (= x t1) x]}]}
 {:id :equal-refl, :given [(= t1 t2) (= t2 t3)], :conclusion [(= t1 t3)], :proof [{:plid 1, :roth :premise, :body (= t1 t2)} {:plid 2, :roth :premise, :body (= t2 t3)} {:plid 5, :body (= t1 t3), :roth :equal-e, :refs [2 1 (= t1 x) x]}]}
 {:id :modus-barbara, :given [(forall [x] (impl (P x) (Q x))) (forall [x] (impl (Q x) (R x)))], :conclusion [(forall [x] (impl (P x) (R x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (Q x)))} {:plid 2, :roth :premise, :body (forall [x] (impl (Q x) (R x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (impl (P :i) (Q :i)), :roth :forall-e, :refs [1 5]} {:plid 9, :body (impl (Q :i) (R :i)), :roth :forall-e, :refs [2 5]} [{:plid 10, :body (P :i), :roth :assumption, :refs nil} {:plid 13, :body (Q :i), :roth :impl-e, :refs [8 10]} {:plid 14, :body (R :i), :roth :impl-e, :refs [9 13]}] {:plid 7, :body (impl (P :i) (R :i)), :roth :impl-i, :refs [[10 14]]}] {:plid 3, :body (forall [x] (impl (P x) (R x))), :roth :forall-i, :refs [[5 7]]}]}
 {:id :modus-celarent, :given [(forall [x] (impl (P x) (not (Q x)))) (forall [x] (impl (R x) (P x)))], :conclusion [(forall [x] (impl (R x) (not (Q x))))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (not (Q x))))} {:plid 2, :roth :premise, :body (forall [x] (impl (R x) (P x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 8, :body (impl (P :i) (not (Q :i))), :roth :forall-e, :refs [1 5]} {:plid 9, :body (impl (R :i) (P :i)), :roth :forall-e, :refs [2 5]} [{:plid 10, :body (R :i), :roth :assumption, :refs nil} {:plid 13, :body (P :i), :roth :impl-e, :refs [9 10]} {:plid 14, :body (not (Q :i)), :roth :impl-e, :refs [8 13]}] {:plid 7, :body (impl (R :i) (not (Q :i))), :roth :impl-i, :refs [[10 14]]}] {:plid 3, :body (forall [x] (impl (R x) (not (Q x)))), :roth :forall-i, :refs [[5 7]]}]}
 {:id :modus-darii, :given [(forall [x] (impl (P x) (Q x))) (exists [x] (and (R x) (P x)))], :conclusion [(exists [x] (and (R x) (Q x)))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (Q x)))} {:plid 2, :roth :premise, :body (exists [x] (and (R x) (P x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 6, :body (and (R :i) (P :i)), :roth :assumption, :refs nil} {:plid 9, :body (impl (P :i) (Q :i)), :roth :forall-e, :refs [1 5]} {:plid 10, :body (P :i), :roth :and-e2, :refs [6]} {:plid 11, :body (Q :i), :roth :impl-e, :refs [9 10]} {:plid 12, :body (R :i), :roth :and-e1, :refs [6]} {:plid 13, :body (and (R :i) (Q :i)), :roth :and-i, :refs [12 11]} {:plid 8, :body (exists [x] (and (R x) (Q x))), :roth :exists-i, :refs [5 13]}] {:plid 3, :body (exists [x] (and (R x) (Q x))), :roth :exists-e, :refs [2 [5 8]]}]}
 {:id :modus-ferio, :given [(forall [x] (impl (P x) (not (Q x)))) (exists [x] (and (R x) (P x)))], :conclusion [(exists [x] (and (R x) (not (Q x))))], :proof [{:plid 1, :roth :premise, :body (forall [x] (impl (P x) (not (Q x))))} {:plid 2, :roth :premise, :body (exists [x] (and (R x) (P x)))} [{:plid 5, :body (actual :i), :roth :assumption, :refs nil} {:plid 6, :body (and (R :i) (P :i)), :roth :assumption, :refs nil} {:plid 9, :body (impl (P :i) (not (Q :i))), :roth :forall-e, :refs [1 5]} {:plid 10, :body (P :i), :roth :and-e2, :refs [6]} {:plid 11, :body (not (Q :i)), :roth :impl-e, :refs [9 10]} {:plid 12, :body (R :i), :roth :and-e1, :refs [6]} {:plid 13, :body (and (R :i) (not (Q :i))), :roth :and-i, :refs [12 11]} {:plid 8, :body (exists [x] (and (R x) (not (Q x)))), :roth :exists-i, :refs [5 13]}] {:plid 3, :body (exists [x] (and (R x) (not (Q x)))), :roth :exists-e, :refs [2 [5 8]]}]}
