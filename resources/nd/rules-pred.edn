; lwb Logic WorkBench -- Natural deduction

; Copyright (c) 2015 - 2016 Tobias VÃ¶lzel, Burkhardt Renz, THM. All rights reserved.
; The use and distribution terms for this software are covered by the
; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php).
; By using this software in any fashion, you are agreeing to be bound by
; the terms of this license.

; FORALL 
{:id :forall-i
 :given      [(infer (actual x0)
                     (substitution phi x x0))]
 :conclusion [(forall [x] phi)]
 :backward  true}
{:id :forall-e
 :given      [(forall [x] phi)
              (actual t)]
 :conclusion [(substitution phi x t)]
 :forward   true}

; EXISTS
{:id :exists-i
 :given      [(actual t)
              (substitution phi x t)]
 :conclusion [(exists [x] phi)]
 :backward  true}
{:id :exists-e
 :given      [(exists [x] phi)
              (infer [(actual x0)
                      (substitution phi x x0)]
                     X)]
 :conclusion [X]
 :forward  true}

; EQUAL
{:id :equal-i
 :given      []
 :conclusion [(= t t)]
 :forward   true}
{:id :equal-e
 :prereq [(substitutable? phi _:x a)
          (seq? phi)]
 :given  [(= a b) phi _:x]
 :conclusion [(substitution phi _:x b)]
 :forward true}
;; sometimes you need this
{:id :equal-reflexivity
 :given      [(= a b)]
 :conclusion [(= b a)]
 :forward   true
 :backward  true}
