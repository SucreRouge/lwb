; Generated by lwb rev 1.0.0000 at 2016-12-08
; Do not edit.
{:id :notnot-i, :given [(at [i] P)], :conclusion [(at [i] (not (not P)))], :proof [{:plid 1, :roth :premise, :body (at [i] P)} [{:plid 4, :body (at [i] (not P)), :roth :assumption, :refs nil} {:plid 7, :body (at [i] contradiction), :roth :not-e, :refs [4 1]}] {:plid 2, :body (at [i] (not (not P))), :roth :not-i, :refs [[4 7]]}]}
{:id :always-notnot-i, :given [(at [i] (always P))], :conclusion [(at [i] (always (not (not P))))], :proof [{:plid 1, :roth :premise, :body (at [i] (always P))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] P), :roth :always-e, :refs [1 4]} {:plid 8, :body (at [j] (not (not P))), :roth :notnot-i, :refs [7]}] {:plid 2, :body (at [i] (always (not (not P)))), :roth :always-i, :refs [[4 8]]}]}
{:id :notnot-e, :given [(at [i] (not (not P)))], :conclusion [(at [i] P)], :proof [{:plid 1, :roth :premise, :body (at [i] (not (not P)))} [{:plid 4, :body (at [i] (not P)), :roth :assumption, :refs nil} {:plid 7, :body (at [i] contradiction), :roth :not-e, :refs [1 4]}] {:plid 2, :body (at [i] P), :roth :raa, :refs [[4 7]]}]}
{:id :always-notnot-e, :given [(at [i] (always (not (not A))))], :conclusion [(at [i] (always A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (not (not A))))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] (not (not A))), :roth :always-e, :refs [1 4]} {:plid 8, :body (at [j] A), :roth :notnot-e, :refs [7]}] {:plid 2, :body (at [i] (always A)), :roth :always-i, :refs [[4 8]]}]}
{:id :mt, :given [(at [i] (impl P Q)) (at [i] (not Q))], :conclusion [(at [i] (not P))], :proof [{:plid 1, :roth :premise, :body (at [i] (impl P Q))} {:plid 2, :roth :premise, :body (at [i] (not Q))} [{:plid 5, :body (at [i] P), :roth :assumption, :refs nil} {:plid 8, :body (at [i] Q), :roth :impl-e, :refs [1 5]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [2 8]}] {:plid 3, :body (at [i] (not P)), :roth :not-i, :refs [[5 9]]}]}
{:id :tnd, :given [], :conclusion [(at [i] (or P (not P)))], :proof [[{:plid 3, :body (at [i] (not (or P (not P)))), :roth :assumption, :refs nil} [{:plid 8, :body (at [i] P), :roth :assumption, :refs nil} {:plid 11, :body (at [i] (or P (not P))), :roth :or-i1, :refs [8]} {:plid 10, :body (at [i] contradiction), :roth :not-e, :refs [3 11]}] {:plid 7, :body (at [i] (not P)), :roth :not-i, :refs [[8 10]]} {:plid 6, :body (at [i] (or P (not P))), :roth :or-i2, :refs [7]} {:plid 5, :body (at [i] contradiction), :roth :not-e, :refs [3 6]}] {:plid 1, :body (at [i] (or P (not P))), :roth :raa, :refs [[3 5]]}]}
{:id :always-tnd, :given [], :conclusion [(at [i] (always (or P (not P))))], :proof [[{:plid 3, :body (<= i j), :roth :assumption, :refs nil} {:plid 6, :body (at [j] (or P (not P))), :roth :tnd, :refs []}] {:plid 1, :body (at [i] (always (or P (not P)))), :roth :always-i, :refs [[3 6]]}]}
{:id :contrap, :given [(at [i] (impl A B))], :conclusion [(at [i] (impl (not B) (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (impl A B))} [{:plid 4, :body (at [i] (not B)), :roth :assumption, :refs nil} [{:plid 7, :body (at [i] A), :roth :assumption, :refs nil} {:plid 10, :body (at [i] B), :roth :impl-e, :refs [1 7]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [4 10]}] {:plid 6, :body (at [i] (not A)), :roth :not-i, :refs [[7 9]]}] {:plid 2, :body (at [i] (impl (not B) (not A))), :roth :impl-i, :refs [[4 6]]}]}
{:id :not-and->or-not, :given [(at [i] (not (and P Q)))], :conclusion [(at [i] (or (not P) (not Q)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (and P Q)))} [{:plid 4, :body (at [i] (not (or (not P) (not Q)))), :roth :assumption, :refs nil} [{:plid 20, :body (at [i] (not P)), :roth :assumption, :refs nil} {:plid 24, :body (at [i] (or (not P) (not Q))), :roth :or-i1, :refs [20]} {:plid 22, :body (at [i] contradiction), :roth :not-e, :refs [4 24]}] {:plid 10, :body (at [i] P), :roth :raa, :refs [[20 22]]} [{:plid 13, :body (at [i] (not Q)), :roth :assumption, :refs nil} {:plid 17, :body (at [i] (or (not P) (not Q))), :roth :or-i2, :refs [13]} {:plid 15, :body (at [i] contradiction), :roth :not-e, :refs [4 17]}] {:plid 11, :body (at [i] Q), :roth :raa, :refs [[13 15]]} {:plid 8, :body (at [i] (and P Q)), :roth :and-i, :refs [10 11]} {:plid 6, :body (at [i] contradiction), :roth :not-e, :refs [1 8]}] {:plid 2, :body (at [i] (or (not P) (not Q))), :roth :raa, :refs [[4 6]]}]}
{:id :or-not->not-and, :given [(at [i] (or (not P) (not Q)))], :conclusion [(at [i] (not (and P Q)))], :proof [{:plid 1, :roth :premise, :body (at [i] (or (not P) (not Q)))} [{:plid 4, :body (at [i] (not P)), :roth :assumption, :refs nil} [{:plid 10, :body (at [i] (and P Q)), :roth :assumption, :refs nil} {:plid 13, :body (at [i] P), :roth :and-e1, :refs [10]} {:plid 14, :body (at [i] contradiction), :roth :not-e, :refs [4 13]}] {:plid 6, :body (at [i] (not (and P Q))), :roth :not-i, :refs [[10 14]]}] [{:plid 7, :body (at [i] (not Q)), :roth :assumption, :refs nil} [{:plid 15, :body (at [i] (and P Q)), :roth :assumption, :refs nil} {:plid 18, :body (at [i] Q), :roth :and-e2, :refs [15]} {:plid 19, :body (at [i] contradiction), :roth :not-e, :refs [7 18]}] {:plid 9, :body (at [i] (not (and P Q))), :roth :not-i, :refs [[15 19]]}] {:plid 2, :body (at [i] (not (and P Q))), :roth :or-e, :refs [1 [4 6] [7 9]]}]}
{:id :not-or->and-not, :given [(at [i] (not (or P Q)))], :conclusion [(at [i] (and (not P) (not Q)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (or P Q)))} [{:plid 7, :body (at [i] P), :roth :assumption, :refs nil} {:plid 10, :body (at [i] (or P Q)), :roth :or-i1, :refs [7]} {:plid 11, :body (at [i] contradiction), :roth :not-e, :refs [1 10]}] {:plid 4, :body (at [i] (not P)), :roth :not-i, :refs [[7 11]]} [{:plid 12, :body (at [i] Q), :roth :assumption, :refs nil} {:plid 15, :body (at [i] (or P Q)), :roth :or-i2, :refs [12]} {:plid 16, :body (at [i] contradiction), :roth :not-e, :refs [1 15]}] {:plid 5, :body (at [i] (not Q)), :roth :not-i, :refs [[12 16]]} {:plid 2, :body (at [i] (and (not P) (not Q))), :roth :and-i, :refs [4 5]}]}
{:id :and-not->not-or, :given [(at [i] (and (not P) (not Q)))], :conclusion [(at [i] (not (or P Q)))], :proof [{:plid 1, :roth :premise, :body (at [i] (and (not P) (not Q)))} {:plid 4, :body (at [i] (not P)), :roth :and-e1, :refs [1]} {:plid 5, :body (at [i] (not Q)), :roth :and-e2, :refs [1]} [{:plid 6, :body (at [i] (or P Q)), :roth :assumption, :refs nil} [{:plid 9, :body (at [i] P), :roth :assumption, :refs nil} {:plid 15, :body (at [i] contradiction), :roth :not-e, :refs [4 9]}] [{:plid 12, :body (at [i] Q), :roth :assumption, :refs nil} {:plid 16, :body (at [i] contradiction), :roth :not-e, :refs [5 12]}] {:plid 8, :body (at [i] contradiction), :roth :or-e, :refs [6 [9 15] [12 16]]}] {:plid 2, :body (at [i] (not (or P Q))), :roth :not-i, :refs [[6 8]]}]}
{:id :not-atnext->atnext-not, :given [(at [i] (not (atnext A)))], :conclusion [(at [i] (atnext (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (atnext A)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} [{:plid 6, :body (at [i'] A), :roth :assumption, :refs nil} {:plid 9, :body (at [i] (atnext A)), :roth :atnext-i, :refs [6 4]} {:plid 10, :body (at [i'] contradiction), :roth :not-e, :refs [1 9]}] {:plid 5, :body (at [i'] (not A)), :roth :not-i, :refs [[6 10]]} {:plid 2, :body (at [i] (atnext (not A))), :roth :atnext-i, :refs [5 4]}]}
{:id :atnext-not->not-atnext, :given [(at [i] (atnext (not A)))], :conclusion [(at [i] (not (atnext A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext (not A)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} {:plid 5, :body (at [i'] (not A)), :roth :atnext-e, :refs [1 4]} [{:plid 6, :body (at [i] (atnext A)), :roth :assumption, :refs nil} {:plid 9, :body (at [i'] A), :roth :atnext-e, :refs [6 4]} {:plid 10, :body (at [i'] contradiction), :roth :not-e, :refs [5 9]}] {:plid 2, :body (at [i] (not (atnext A))), :roth :not-i, :refs [[6 10]]}]}
{:id :not-finally->always-not, :given [(at [i] (not (finally A)))], :conclusion [(at [i] (always (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (finally A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} [{:plid 7, :body (at [j] A), :roth :assumption, :refs nil} {:plid 10, :body (at [i] (finally A)), :roth :finally-i, :refs [7 4]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [1 10]}] {:plid 6, :body (at [j] (not A)), :roth :not-i, :refs [[7 9]]}] {:plid 2, :body (at [i] (always (not A))), :roth :always-i, :refs [[4 6]]}]}
{:id :always-not->not-finally, :given [(at [i] (always (not A)))], :conclusion [(at [i] (not (finally A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (not A)))} [{:plid 4, :body (at [i] (finally A)), :roth :assumption, :refs nil} [{:plid 7, :body (<= i j), :roth :assumption, :refs nil} {:plid 8, :body (at [j] A), :roth :assumption, :refs nil} {:plid 11, :body (at [j] (not A)), :roth :always-e, :refs [1 7]} {:plid 12, :body (at [j] contradiction), :roth :not-e, :refs [11 8]}] {:plid 6, :body (at [j] contradiction), :roth :finally-e, :refs [4 [7 12]]}] {:plid 2, :body (at [i] (not (finally A))), :roth :not-i, :refs [[4 6]]}]}
{:id :finally-not->not-always, :given [(at [i] (finally (not A)))], :conclusion [(at [i] (not (always A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (not A)))} [{:plid 4, :body (at [i] (always A)), :roth :assumption, :refs nil} [{:plid 7, :body (<= i j), :roth :assumption, :refs nil} {:plid 8, :body (at [j] (not A)), :roth :assumption, :refs nil} {:plid 11, :body (at [j] A), :roth :always-e, :refs [4 7]} {:plid 10, :body (at [j] contradiction), :roth :not-e, :refs [8 11]}] {:plid 6, :body (at [j] contradiction), :roth :finally-e, :refs [1 [7 10]]}] {:plid 2, :body (at [i] (not (always A))), :roth :not-i, :refs [[4 6]]}]}
{:id :not-always->finally-not, :given [(at [i] (not (always A)))], :conclusion [(at [i] (finally (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (always A)))} [{:plid 4, :body (at [i] (not (finally (not A)))), :roth :assumption, :refs nil} {:plid 7, :body (at [i] (always (not (not A)))), :roth :not-finally->always-not, :refs [4]} {:plid 8, :body (at [i] (always A)), :roth :always-notnot-e, :refs [7]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [1 8]}] {:plid 2, :body (at [i] (finally (not A))), :roth :raa, :refs [[4 9]]}]}
{:id :always->current, :given [(at [i] (always A))], :conclusion [(at [i] A)], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (<= i i), :roth :<=refl, :refs []} {:plid 5, :body (at [i] A), :roth :always-e, :refs [1 4]}]}
{:id :current->finally, :given [(at [i] A)], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] A)} {:plid 4, :body (<= i i), :roth :<=refl, :refs []} {:plid 2, :body (at [i] (finally A)), :roth :finally-i, :refs [1 4]}]}
{:id :always->atnext, :given [(at [i] (always A))], :conclusion [(at [i] (atnext A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} {:plid 5, :body (<= i i'), :roth :succ/<=, :refs [4]} {:plid 6, :body (at [i'] A), :roth :always-e, :refs [1 5]} {:plid 2, :body (at [i] (atnext A)), :roth :atnext-i, :refs [6 4]}]}
{:id :atnext->finally, :given [(at [i] (atnext A))], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext A))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} {:plid 5, :body (at [i'] A), :roth :atnext-e, :refs [1 4]} {:plid 6, :body (<= i i'), :roth :succ/<=, :refs [4]} {:plid 7, :body (at [i] (finally A)), :roth :finally-i, :refs [5 6]}]}
{:id :always->finally, :given [(at [i] (always A))], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (<= i i), :roth :<=refl, :refs []} {:plid 5, :body (at [i] A), :roth :always-e, :refs [1 4]} {:plid 2, :body (at [i] (finally A)), :roth :finally-i, :refs [5 4]}]}
{:id :finally-always->always-finally, :given [(at [i] (finally (always A)))], :conclusion [(at [i] (always (finally A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (always A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} [{:plid 7, :body (<= i k), :roth :assumption, :refs nil} {:plid 8, :body (at [k] (always A)), :roth :assumption, :refs nil} {:plid 11, :body (or (< j k) (= j k) (< k j)), :roth :linear, :refs [4 7]} [{:plid 12, :body (< j k), :roth :assumption, :refs nil} {:plid 21, :body (<= j k), :roth :</<=, :refs [12]} {:plid 22, :body (at [k] A), :roth :always->current, :refs [8]} {:plid 14, :body (at [j] (finally A)), :roth :finally-i, :refs [22 21]}] [{:plid 15, :body (= j k), :roth :assumption, :refs nil} {:plid 24, :body (<= j k), :roth :=/<=, :refs [15]} {:plid 25, :body (at [k] A), :roth :always->current, :refs [8]} {:plid 17, :body (at [j] (finally A)), :roth :finally-i, :refs [25 24]}] [{:plid 18, :body (< k j), :roth :assumption, :refs nil} {:plid 27, :body (<= k j), :roth :</<=, :refs [18]} {:plid 28, :body (at [j] A), :roth :always-e, :refs [8 27]} {:plid 29, :body (<= j j), :roth :<=refl, :refs []} {:plid 20, :body (at [j] (finally A)), :roth :finally-i, :refs [28 29]}] {:plid 10, :body (at [j] (finally A)), :roth :rel-cases, :refs [11 [12 14] [15 17] [18 20]]}] {:plid 6, :body (at [j] (finally A)), :roth :finally-e, :refs [1 [7 10]]}] {:plid 2, :body (at [i] (always (finally A))), :roth :always-i, :refs [[4 6]]}]}
{:id :always-always->always, :given [(at [i] (always (always A)))], :conclusion [(at [i] (always A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (always A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] (always A)), :roth :always-e, :refs [1 4]} {:plid 8, :body (<= j j), :roth :<=refl, :refs []} {:plid 9, :body (at [j] A), :roth :always-e, :refs [7 8]}] {:plid 2, :body (at [i] (always A)), :roth :always-i, :refs [[4 9]]}]}
{:id :always->always-always, :given [(at [i] (always A))], :conclusion [(at [i] (always (always A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} [{:plid 7, :body (<= j k), :roth :assumption, :refs nil} {:plid 10, :body (<= i k), :roth :<=trans, :refs [4 7]} {:plid 11, :body (at [k] A), :roth :always-e, :refs [1 10]}] {:plid 6, :body (at [j] (always A)), :roth :always-i, :refs [[7 11]]}] {:plid 2, :body (at [i] (always (always A))), :roth :always-i, :refs [[4 6]]}]}
{:id :finally-finally->finally, :given [(at [i] (finally (finally A)))], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (finally A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 5, :body (at [j] (finally A)), :roth :assumption, :refs nil} [{:plid 8, :body (<= j k), :roth :assumption, :refs nil} {:plid 9, :body (at [k] A), :roth :assumption, :refs nil} {:plid 12, :body (<= i k), :roth :<=trans, :refs [4 8]} {:plid 13, :body (at [i] (finally A)), :roth :finally-i, :refs [9 12]}] {:plid 7, :body (at [i] (finally A)), :roth :finally-e, :refs [5 [8 13]]}] {:plid 2, :body (at [i] (finally A)), :roth :finally-e, :refs [1 [4 7]]}]}
{:id :finally->finally-finally, :given [(at [i] (finally A))], :conclusion [(at [i] (finally (finally A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally A))} {:plid 4, :body (<= i i), :roth :<=refl, :refs []} {:plid 2, :body (at [i] (finally (finally A))), :roth :finally-i, :refs [1 4]}]}
{:id :always-serial, :given [(at [i] (always A))], :conclusion [(at [i] (and A (atnext (always A))))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (at [i] A), :roth :always->current, :refs [1]} {:plid 5, :body (succ i i'), :roth :succ, :refs []} [{:plid 8, :body (<= i' j), :roth :assumption, :refs nil} {:plid 11, :body (<= i i'), :roth :succ/<=, :refs [5]} {:plid 12, :body (<= i j), :roth :<=trans, :refs [11 8]} {:plid 13, :body (at [j] A), :roth :always-e, :refs [1 12]}] {:plid 7, :body (at [i'] (always A)), :roth :always-i, :refs [[8 13]]} {:plid 6, :body (at [i] (atnext (always A))), :roth :atnext-i, :refs [7 5]} {:plid 2, :body (at [i] (and A (atnext (always A)))), :roth :and-i, :refs [4 6]}]}
{:id :always-inductive, :given [(at [i] (and A (always (impl A (atnext A)))))], :conclusion [(at [i] (always A))], :proof [{:plid 1, :roth :premise, :body (at [i] (and A (always (impl A (atnext A)))))} {:plid 4, :body (at [i] A), :roth :and-e1, :refs [1]} {:plid 5, :body (at [i] (always (impl A (atnext A)))), :roth :and-e2, :refs [1]} [{:plid 6, :body (at [i] (not (always A))), :roth :assumption, :refs nil} {:plid 9, :body (at [i] (finally (not A))), :roth :not-always->finally-not, :refs [6]} {:plid 10, :body (at [i] (until truth (not A))), :roth :until-i, :refs [9]} {:plid 16, :body (at [i] (always (impl (not A) (not A)))), :roth :trivial1, :refs []} [{:plid 17, :body (<= i j), :roth :assumption, :refs nil} {:plid 20, :body (at [j] (impl A (atnext A))), :roth :always-e, :refs [5 17]} [{:plid 21, :body (at [j] (and truth (atnext (not A)))), :roth :assumption, :refs nil} {:plid 24, :body (at [j] (atnext (not A))), :roth :and-e2, :refs [21]} {:plid 25, :body (at [j] (impl (not (atnext A)) (not A))), :roth :contrap, :refs [20]} {:plid 26, :body (at [j] (not (atnext A))), :roth :atnext-not->not-atnext, :refs [24]} {:plid 27, :body (at [j] (not A)), :roth :impl-e, :refs [25 26]}] {:plid 19, :body (at [j] (impl (and truth (atnext (not A))) (not A))), :roth :impl-i, :refs [[21 27]]}] {:plid 14, :body (at [i] (always (impl (and truth (atnext (not A))) (not A)))), :roth :always-i, :refs [[17 19]]} {:plid 11, :body (at [i] (impl (until truth (not A)) (not A))), :roth :until-ind, :refs [16 14]} {:plid 28, :body (at [i] (not A)), :roth :impl-e, :refs [11 10]} {:plid 29, :body (at [i] contradiction), :roth :not-e, :refs [28 4]}] {:plid 2, :body (at [i] (always A)), :roth :raa, :refs [[6 29]]}]}
{:id :always-atnext->atnext-always, :given [(at [i] (always (atnext A)))], :conclusion [(at [i] (atnext (always A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (atnext A)))} {:plid 4, :body (at [i] (atnext A)), :roth :always->current, :refs [1]} {:plid 5, :body (succ i i'), :roth :succ, :refs []} {:plid 6, :body (at [i'] A), :roth :atnext-e, :refs [4 5]} [{:plid 10, :body (<= i' j), :roth :assumption, :refs nil} [{:plid 13, :body (at [j] A), :roth :assumption, :refs nil} {:plid 16, :body (<= i i'), :roth :succ/<=, :refs [5]} {:plid 17, :body (<= i j), :roth :<=trans, :refs [16 10]} {:plid 18, :body (at [j] (atnext A)), :roth :always-e, :refs [1 17]}] {:plid 12, :body (at [j] (impl A (atnext A))), :roth :impl-i, :refs [[13 18]]}] {:plid 9, :body (at [i'] (always (impl A (atnext A)))), :roth :always-i, :refs [[10 12]]} {:plid 8, :body (at [i'] (and A (always (impl A (atnext A))))), :roth :and-i, :refs [6 9]} {:plid 7, :body (at [i'] (always A)), :roth :always-inductive, :refs [8]} {:plid 2, :body (at [i] (atnext (always A))), :roth :atnext-i, :refs [7 5]}]}
{:id :atnext-always->always-atnext, :given [(at [i] (atnext (always A)))], :conclusion [(at [i] (always (atnext A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext (always A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (succ j j'), :roth :succ, :refs []} {:plid 8, :body (succ i i'), :roth :succ, :refs []} {:plid 10, :body (<= i' j'), :roth :succ-succ-<=/<=, :refs [8 7 4]} {:plid 11, :body (at [i'] (always A)), :roth :atnext-e, :refs [1 8]} {:plid 12, :body (at [j'] A), :roth :always-e, :refs [11 10]} {:plid 6, :body (at [j] (atnext A)), :roth :atnext-i, :refs [12 7]}] {:plid 2, :body (at [i] (always (atnext A))), :roth :always-i, :refs [[4 6]]}]}
{:id :finally-atnext->atnext-finally, :given [(at [i] (finally (atnext A)))], :conclusion [(at [i] (atnext (finally A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (atnext A)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} [{:plid 6, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] (atnext A)), :roth :assumption, :refs nil} {:plid 10, :body (succ j j'), :roth :succ, :refs []} {:plid 11, :body (at [j'] A), :roth :atnext-e, :refs [7 10]} {:plid 12, :body (<= i' j'), :roth :succ-succ-<=/<=, :refs [4 10 6]} {:plid 13, :body (at [i'] (finally A)), :roth :finally-i, :refs [11 12]}] {:plid 5, :body (at [i'] (finally A)), :roth :finally-e, :refs [1 [6 13]]} {:plid 2, :body (at [i] (atnext (finally A))), :roth :atnext-i, :refs [5 4]}]}
{:id :atnext-finally->finally-atnext, :given [(at [i] (atnext (finally A)))], :conclusion [(at [i] (finally (atnext A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext (finally A)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} {:plid 5, :body (at [i'] (finally A)), :roth :atnext-e, :refs [1 4]} [{:plid 6, :body (<= i' j'), :roth :assumption, :refs nil} {:plid 7, :body (at [j'] A), :roth :assumption, :refs nil} {:plid 10, :body (succ j j'), :roth :succ, :refs []} {:plid 11, :body (at [j] (atnext A)), :roth :atnext-i, :refs [7 10]} {:plid 12, :body (<= i j), :roth :succ-succ-<=/<=-b, :refs [4 10 6]} {:plid 13, :body (at [i] (finally (atnext A))), :roth :finally-i, :refs [11 12]}] {:plid 2, :body (at [i] (finally (atnext A))), :roth :finally-e, :refs [5 [6 13]]}]}
{:id :atnext-impl-dist1, :given [(at [i] (atnext (impl A B)))], :conclusion [(at [i] (impl (atnext A) (atnext B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext (impl A B)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} [{:plid 5, :body (at [i] (atnext A)), :roth :assumption, :refs nil} {:plid 8, :body (at [i'] (impl A B)), :roth :atnext-e, :refs [1 4]} {:plid 10, :body (at [i'] A), :roth :atnext-e, :refs [5 4]} {:plid 11, :body (at [i'] B), :roth :impl-e, :refs [8 10]} {:plid 7, :body (at [i] (atnext B)), :roth :atnext-i, :refs [11 4]}] {:plid 2, :body (at [i] (impl (atnext A) (atnext B))), :roth :impl-i, :refs [[5 7]]}]}
{:id :atnext-impl-dist2, :given [(at [i] (impl (atnext A) (atnext B)))], :conclusion [(at [i] (atnext (impl A B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (impl (atnext A) (atnext B)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} [{:plid 6, :body (at [i'] A), :roth :assumption, :refs nil} {:plid 9, :body (at [i] (atnext A)), :roth :atnext-i, :refs [6 4]} {:plid 11, :body (at [i] (atnext B)), :roth :impl-e, :refs [1 9]} {:plid 8, :body (at [i'] B), :roth :atnext-e, :refs [11 4]}] {:plid 5, :body (at [i'] (impl A B)), :roth :impl-i, :refs [[6 8]]} {:plid 2, :body (at [i] (atnext (impl A B))), :roth :atnext-i, :refs [5 4]}]}
{:id :atnext-and-dist1, :given [(at [i] (atnext (and A B)))], :conclusion [(at [i] (and (atnext A) (atnext B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext (and A B)))} {:plid 4, :body (succ i i'), :roth :succ, :refs []} {:plid 5, :body (at [i'] (and A B)), :roth :atnext-e, :refs [1 4]} {:plid 6, :body (at [i'] A), :roth :and-e1, :refs [5]} {:plid 7, :body (at [i'] B), :roth :and-e2, :refs [5]} {:plid 8, :body (at [i] (atnext A)), :roth :atnext-i, :refs [6 4]} {:plid 9, :body (at [i] (atnext B)), :roth :atnext-i, :refs [7 4]} {:plid 2, :body (at [i] (and (atnext A) (atnext B))), :roth :and-i, :refs [8 9]}]}
{:id :atnext-and-dist2, :given [(at [i] (and (atnext A) (atnext B)))], :conclusion [(at [i] (atnext (and A B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (and (atnext A) (atnext B)))} {:plid 4, :body (at [i] (atnext A)), :roth :and-e1, :refs [1]} {:plid 5, :body (at [i] (atnext B)), :roth :and-e2, :refs [1]} {:plid 6, :body (succ i i'), :roth :succ, :refs []} {:plid 7, :body (at [i'] A), :roth :atnext-e, :refs [4 6]} {:plid 8, :body (at [i'] B), :roth :atnext-e, :refs [5 6]} {:plid 9, :body (at [i'] (and A B)), :roth :and-i, :refs [7 8]} {:plid 2, :body (at [i] (atnext (and A B))), :roth :atnext-i, :refs [9 6]}]}
{:id :atnext-or-dist2, :given [(at [i] (or (atnext A) (atnext B)))], :conclusion [(at [i] (atnext (or A B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (or (atnext A) (atnext B)))} [{:plid 4, :body (at [i] (atnext A)), :roth :assumption, :refs nil} {:plid 10, :body (succ i i'), :roth :succ, :refs []} {:plid 11, :body (at [i'] A), :roth :atnext-e, :refs [4 10]} {:plid 12, :body (at [i'] (or A B)), :roth :or-i1, :refs [11]} {:plid 6, :body (at [i] (atnext (or A B))), :roth :atnext-i, :refs [12 10]}] [{:plid 7, :body (at [i] (atnext B)), :roth :assumption, :refs nil} {:plid 14, :body (succ i i'), :roth :succ, :refs []} {:plid 15, :body (at [i'] B), :roth :atnext-e, :refs [7 14]} {:plid 16, :body (at [i'] (or A B)), :roth :or-i2, :refs [15]} {:plid 9, :body (at [i] (atnext (or A B))), :roth :atnext-i, :refs [16 14]}] {:plid 2, :body (at [i] (atnext (or A B))), :roth :or-e, :refs [1 [4 6] [7 9]]}]}
{:id :always-and-dist1, :given [(at [i] (always (and A B)))], :conclusion [(at [i] (and (always A) (always B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (and A B)))} [{:plid 7, :body (<= i j), :roth :assumption, :refs nil} {:plid 10, :body (at [j] (and A B)), :roth :always-e, :refs [1 7]} {:plid 11, :body (at [j] A), :roth :and-e1, :refs [10]}] {:plid 4, :body (at [i] (always A)), :roth :always-i, :refs [[7 11]]} [{:plid 12, :body (<= i j), :roth :assumption, :refs nil} {:plid 15, :body (at [j] (and A B)), :roth :always-e, :refs [1 12]} {:plid 16, :body (at [j] B), :roth :and-e2, :refs [15]}] {:plid 5, :body (at [i] (always B)), :roth :always-i, :refs [[12 16]]} {:plid 2, :body (at [i] (and (always A) (always B))), :roth :and-i, :refs [4 5]}]}
{:id :always-and-dist2, :given [(at [i] (and (always A) (always B)))], :conclusion [(at [i] (always (and A B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (and (always A) (always B)))} {:plid 4, :body (at [i] (always A)), :roth :and-e1, :refs [1]} {:plid 5, :body (at [i] (always B)), :roth :and-e2, :refs [1]} [{:plid 6, :body (<= i j), :roth :assumption, :refs nil} {:plid 9, :body (at [j] A), :roth :always-e, :refs [4 6]} {:plid 10, :body (at [j] B), :roth :always-e, :refs [5 6]} {:plid 8, :body (at [j] (and A B)), :roth :and-i, :refs [9 10]}] {:plid 2, :body (at [i] (always (and A B))), :roth :always-i, :refs [[6 8]]}]}
{:id :finally-or-dist1, :given [(at [i] (finally (or A B)))], :conclusion [(at [i] (or (finally A) (finally B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (or A B)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 5, :body (at [j] (or A B)), :roth :assumption, :refs nil} [{:plid 8, :body (at [i] (not (or (finally A) (finally B)))), :roth :assumption, :refs nil} {:plid 11, :body (at [i] (and (not (finally A)) (not (finally B)))), :roth :not-or->and-not, :refs [8]} {:plid 12, :body (at [i] (not (finally A))), :roth :and-e1, :refs [11]} {:plid 13, :body (at [i] (not (finally B))), :roth :and-e2, :refs [11]} {:plid 14, :body (at [i] (always (not A))), :roth :not-finally->always-not, :refs [12]} {:plid 15, :body (at [i] (always (not B))), :roth :not-finally->always-not, :refs [13]} [{:plid 16, :body (at [j] A), :roth :assumption, :refs nil} {:plid 22, :body (at [j] (not A)), :roth :always-e, :refs [14 4]} {:plid 23, :body (at [j] contradiction), :roth :not-e, :refs [22 16]}] [{:plid 19, :body (at [j] B), :roth :assumption, :refs nil} {:plid 24, :body (at [j] (not B)), :roth :always-e, :refs [15 4]} {:plid 21, :body (at [j] contradiction), :roth :not-e, :refs [24 19]}] {:plid 10, :body (at [j] contradiction), :roth :or-e, :refs [5 [16 23] [19 21]]}] {:plid 7, :body (at [i] (or (finally A) (finally B))), :roth :raa, :refs [[8 10]]}] {:plid 2, :body (at [i] (or (finally A) (finally B))), :roth :finally-e, :refs [1 [4 7]]}]}
{:id :finally-or-dist2, :given [(at [i] (or (finally A) (finally B)))], :conclusion [(at [i] (finally (or A B)))], :proof [{:plid 1, :roth :premise, :body (at [i] (or (finally A) (finally B)))} [{:plid 4, :body (at [i] (finally A)), :roth :assumption, :refs nil} [{:plid 10, :body (<= i j), :roth :assumption, :refs nil} {:plid 11, :body (at [j] A), :roth :assumption, :refs nil} {:plid 14, :body (at [j] (or A B)), :roth :or-i1, :refs [11]} {:plid 13, :body (at [i] (finally (or A B))), :roth :finally-i, :refs [14 10]}] {:plid 6, :body (at [i] (finally (or A B))), :roth :finally-e, :refs [4 [10 13]]}] [{:plid 7, :body (at [i] (finally B)), :roth :assumption, :refs nil} [{:plid 16, :body (<= i j), :roth :assumption, :refs nil} {:plid 17, :body (at [j] B), :roth :assumption, :refs nil} {:plid 20, :body (at [j] (or A B)), :roth :or-i2, :refs [17]} {:plid 19, :body (at [i] (finally (or A B))), :roth :finally-i, :refs [20 16]}] {:plid 9, :body (at [i] (finally (or A B))), :roth :finally-e, :refs [7 [16 19]]}] {:plid 2, :body (at [i] (finally (or A B))), :roth :or-e, :refs [1 [4 6] [7 9]]}]}