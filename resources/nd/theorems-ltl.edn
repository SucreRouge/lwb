; Generated by lwb rev 1.0.0000 at 2016-11-30
; Do not edit.
{:id :notnot-i, :given [(at [i] P)], :conclusion [(at [i] (not (not P)))], :proof [{:plid 1, :roth :premise, :body (at [i] P)} [{:plid 4, :body (at [i] (not P)), :roth :assumption, :refs nil} {:plid 7, :body (at [i] contradiction), :roth :not-e, :refs [4 1]}] {:plid 2, :body (at [i] (not (not P))), :roth :not-i, :refs [[4 7]]}]}
{:id :always-notnot-i, :given [(at [i] (always P))], :conclusion [(at [i] (always (not (not P))))], :proof [{:plid 1, :roth :premise, :body (at [i] (always P))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] P), :roth :always-e, :refs [1 4]} {:plid 8, :body (at [j] (not (not P))), :roth :notnot-i, :refs [7]}] {:plid 2, :body (at [i] (always (not (not P)))), :roth :always-i, :refs [[4 8]]}]}
{:id :notnot-e, :given [(at [i] (not (not P)))], :conclusion [(at [i] P)], :proof [{:plid 1, :roth :premise, :body (at [i] (not (not P)))} [{:plid 4, :body (at [i] (not P)), :roth :assumption, :refs nil} {:plid 7, :body (at [i] contradiction), :roth :not-e, :refs [1 4]}] {:plid 2, :body (at [i] P), :roth :raa, :refs [[4 7]]}]}
{:id :always-notnot-e, :given [(at [i] (always (not (not A))))], :conclusion [(at [i] (always A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (not (not A))))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] (not (not A))), :roth :always-e, :refs [1 4]} {:plid 8, :body (at [j] A), :roth :notnot-e, :refs [7]}] {:plid 2, :body (at [i] (always A)), :roth :always-i, :refs [[4 8]]}]}
{:id :mt, :given [(at [i] (impl P Q)) (at [i] (not Q))], :conclusion [(at [i] (not P))], :proof [{:plid 1, :roth :premise, :body (at [i] (impl P Q))} {:plid 2, :roth :premise, :body (at [i] (not Q))} [{:plid 5, :body (at [i] P), :roth :assumption, :refs nil} {:plid 8, :body (at [i] Q), :roth :impl-e, :refs [1 5]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [2 8]}] {:plid 3, :body (at [i] (not P)), :roth :not-i, :refs [[5 9]]}]}
{:id :tnd, :given [], :conclusion [(at [i] (or P (not P)))], :proof [[{:plid 3, :body (at [i] (not (or P (not P)))), :roth :assumption, :refs nil} [{:plid 8, :body (at [i] P), :roth :assumption, :refs nil} {:plid 11, :body (at [i] (or P (not P))), :roth :or-i1, :refs [8]} {:plid 10, :body (at [i] contradiction), :roth :not-e, :refs [3 11]}] {:plid 7, :body (at [i] (not P)), :roth :not-i, :refs [[8 10]]} {:plid 6, :body (at [i] (or P (not P))), :roth :or-i2, :refs [7]} {:plid 5, :body (at [i] contradiction), :roth :not-e, :refs [3 6]}] {:plid 1, :body (at [i] (or P (not P))), :roth :raa, :refs [[3 5]]}]}
{:id :always-tnd, :given [], :conclusion [(at [i] (always (or P (not P))))], :proof [[{:plid 3, :body (<= i j), :roth :assumption, :refs nil} {:plid 6, :body (at [j] (or P (not P))), :roth :tnd, :refs []}] {:plid 1, :body (at [i] (always (or P (not P)))), :roth :always-i, :refs [[3 6]]}]}
{:id :contrap, :given [(at [i] (impl A B))], :conclusion [(at [i] (impl (not B) (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (impl A B))} [{:plid 4, :body (at [i] (not B)), :roth :assumption, :refs nil} [{:plid 7, :body (at [i] A), :roth :assumption, :refs nil} {:plid 10, :body (at [i] B), :roth :impl-e, :refs [1 7]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [4 10]}] {:plid 6, :body (at [i] (not A)), :roth :not-i, :refs [[7 9]]}] {:plid 2, :body (at [i] (impl (not B) (not A))), :roth :impl-i, :refs [[4 6]]}]}
{:id :always-always->always, :given [(at [i] (always (always A)))], :conclusion [(at [i] (always A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (always A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 7, :body (at [j] (always A)), :roth :always-e, :refs [1 4]} {:plid 8, :body (<= j j), :roth :reflexiv, :refs []} {:plid 9, :body (at [j] A), :roth :always-e, :refs [7 8]}] {:plid 2, :body (at [i] (always A)), :roth :always-i, :refs [[4 9]]}]}
{:id :always->always-always, :given [(at [i] (always A))], :conclusion [(at [i] (always (always A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} [{:plid 7, :body (<= j k), :roth :assumption, :refs nil} {:plid 10, :body (<= i k), :roth :transitiv, :refs [4 7]} {:plid 11, :body (at [k] A), :roth :always-e, :refs [1 10]}] {:plid 6, :body (at [j] (always A)), :roth :always-i, :refs [[7 11]]}] {:plid 2, :body (at [i] (always (always A))), :roth :always-i, :refs [[4 6]]}]}
{:id :finally-finally->finally, :given [(at [i] (finally (finally A)))], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (finally A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} {:plid 5, :body (at [j] (finally A)), :roth :assumption, :refs nil} [{:plid 8, :body (<= j k), :roth :assumption, :refs nil} {:plid 9, :body (at [k] A), :roth :assumption, :refs nil} {:plid 12, :body (<= i k), :roth :transitiv, :refs [4 8]} {:plid 13, :body (at [i] (finally A)), :roth :finally-i, :refs [9 12]}] {:plid 7, :body (at [i] (finally A)), :roth :finally-e, :refs [5 [8 13]]}] {:plid 2, :body (at [i] (finally A)), :roth :finally-e, :refs [1 [4 7]]}]}
{:id :finally->finally-finally, :given [(at [i] (finally A))], :conclusion [(at [i] (finally (finally A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally A))} {:plid 4, :body (<= i i), :roth :reflexiv, :refs []} {:plid 2, :body (at [i] (finally (finally A))), :roth :finally-i, :refs [1 4]}]}
{:id :always->finally, :given [(at [i] (always A))], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (<= i i), :roth :reflexiv, :refs []} {:plid 5, :body (at [i] A), :roth :always-e, :refs [1 4]} {:plid 2, :body (at [i] (finally A)), :roth :finally-i, :refs [5 4]}]}
{:id :atnext->finally, :given [(at [i] (atnext A))], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext A))} {:plid 4, :body (succ i j), :roth :succ, :refs []} {:plid 5, :body (at [j] A), :roth :atnext-e, :refs [1 4]} {:plid 6, :body (<= i j), :roth :succ/<=, :refs [4]} {:plid 7, :body (at [i] (finally A)), :roth :finally-i, :refs [5 6]}]}
{:id :always->atnext, :given [(at [i] (always A))], :conclusion [(at [i] (atnext A))], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (succ i j), :roth :succ, :refs []} {:plid 5, :body (<= i j), :roth :succ/<=, :refs [4]} {:plid 6, :body (at [j] A), :roth :always-e, :refs [1 5]} {:plid 2, :body (at [i] (atnext A)), :roth :atnext-i, :refs [6 4]}]}
{:id :atnext-not->not-atnext, :given [(at [i] (atnext (not A)))], :conclusion [(at [i] (not (atnext A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (atnext (not A)))} {:plid 4, :body (succ i j), :roth :succ, :refs []} {:plid 5, :body (at [j] (not A)), :roth :atnext-e, :refs [1 4]} [{:plid 6, :body (at [i] (atnext A)), :roth :assumption, :refs nil} {:plid 9, :body (at [j] A), :roth :atnext-e, :refs [6 4]} {:plid 10, :body (at [j] contradiction), :roth :not-e, :refs [5 9]}] {:plid 2, :body (at [i] (not (atnext A))), :roth :not-i, :refs [[6 10]]}]}
{:id :not-atnext->atnext-not, :given [(at [i] (not (atnext A)))], :conclusion [(at [i] (atnext (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (atnext A)))} {:plid 4, :body (succ i j), :roth :succ, :refs []} [{:plid 6, :body (at [j] A), :roth :assumption, :refs nil} {:plid 9, :body (at [i] (atnext A)), :roth :atnext-i, :refs [6 4]} {:plid 10, :body (at [j] contradiction), :roth :not-e, :refs [1 9]}] {:plid 5, :body (at [j] (not A)), :roth :not-i, :refs [[6 10]]} {:plid 2, :body (at [i] (atnext (not A))), :roth :atnext-i, :refs [5 4]}]}
{:id :not-finally->always-not, :given [(at [i] (not (finally A)))], :conclusion [(at [i] (always (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (finally A)))} [{:plid 4, :body (<= i j), :roth :assumption, :refs nil} [{:plid 7, :body (at [j] A), :roth :assumption, :refs nil} {:plid 10, :body (at [i] (finally A)), :roth :finally-i, :refs [7 4]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [1 10]}] {:plid 6, :body (at [j] (not A)), :roth :not-i, :refs [[7 9]]}] {:plid 2, :body (at [i] (always (not A))), :roth :always-i, :refs [[4 6]]}]}
{:id :always-not->not-finally, :given [(at [i] (always (not A)))], :conclusion [(at [i] (not (finally A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (always (not A)))} [{:plid 4, :body (at [i] (finally A)), :roth :assumption, :refs nil} [{:plid 7, :body (<= i j), :roth :assumption, :refs nil} {:plid 8, :body (at [j] A), :roth :assumption, :refs nil} {:plid 12, :body (at [j] (not A)), :roth :always-e, :refs [1 7]} {:plid 13, :body (at [j] contradiction), :roth :not-e, :refs [12 8]}] {:plid 11, :body (at [j] contradiction), :roth :finally-e, :refs [4 [7 13]]}] {:plid 2, :body (at [i] (not (finally A))), :roth :not-i, :refs [[4 11]]}]}
{:id :finally-not->not-always, :given [(at [i] (finally (not A)))], :conclusion [(at [i] (not (always A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (finally (not A)))} [{:plid 4, :body (at [i] (always A)), :roth :assumption, :refs nil} [{:plid 7, :body (<= i j), :roth :assumption, :refs nil} {:plid 8, :body (at [j] (not A)), :roth :assumption, :refs nil} {:plid 12, :body (at [j] A), :roth :always-e, :refs [4 7]} {:plid 10, :body (at [j] contradiction), :roth :not-e, :refs [8 12]}] {:plid 11, :body (at [j] contradiction), :roth :finally-e, :refs [1 [7 10]]}] {:plid 2, :body (at [i] (not (always A))), :roth :not-i, :refs [[4 11]]}]}
{:id :not-always->finally-not, :given [(at [i] (not (always A)))], :conclusion [(at [i] (finally (not A)))], :proof [{:plid 1, :roth :premise, :body (at [i] (not (always A)))} [{:plid 4, :body (at [i] (not (finally (not A)))), :roth :assumption, :refs nil} {:plid 7, :body (at [i] (always (not (not A)))), :roth :not-finally->always-not, :refs [4]} {:plid 8, :body (at [i] (always A)), :roth :always-notnot-e, :refs [7]} {:plid 9, :body (at [i] contradiction), :roth :not-e, :refs [1 8]}] {:plid 2, :body (at [i] (finally (not A))), :roth :raa, :refs [[4 9]]}]}
{:id :always->current, :given [(at [i] (always A))], :conclusion [(at [i] A)], :proof [{:plid 1, :roth :premise, :body (at [i] (always A))} {:plid 4, :body (<= i i), :roth :reflexiv, :refs []} {:plid 5, :body (at [i] A), :roth :always-e, :refs [1 4]}]}
{:id :current->finally, :given [(at [i] A)], :conclusion [(at [i] (finally A))], :proof [{:plid 1, :roth :premise, :body (at [i] A)} {:plid 4, :body (<= i i), :roth :reflexiv, :refs []} {:plid 2, :body (at [i] (finally A)), :roth :finally-i, :refs [1 4]}]}